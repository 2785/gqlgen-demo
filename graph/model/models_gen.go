// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Account interface {
	IsAccount()
}

type AccountGroup struct {
	ID           *int         `json:"id"`
	Name         *string      `json:"name"`
	CreationTime *time.Time   `json:"creationTime"`
	ModifyTime   *time.Time   `json:"modifyTime"`
	AccountType  *AccountType `json:"accountType"`
	CrmID        *string      `json:"crmID"`
	CrmOwner     *string      `json:"crmOwner"`
	Accounts     []Account    `json:"accounts"`
}

type AccountSearchParam struct {
	Name *string `json:"name"`
}

type AddBuyer struct {
	Name     *string       `json:"name"`
	Status   AccountStatus `json:"status"`
	Country  *string       `json:"country"`
	Locale   *string       `json:"locale"`
	Timezone *string       `json:"timezone"`
	CrmID    *string       `json:"crmID"`
	CrmOwner *string       `json:"crmOwner"`
	Seats    []*AddSeat    `json:"seats"`
}

type AddSeat struct {
	ExternalTradingDeskID int `json:"externalTradingDeskID"`
}

type BuyerAccount struct {
	ID           int             `json:"id"`
	CreationTime *time.Time      `json:"creationTime"`
	ModifyTime   *time.Time      `json:"modifyTime"`
	Name         *string         `json:"name"`
	Status       AccountStatus   `json:"status"`
	AccountType  *AccountType    `json:"accountType"`
	Country      *string         `json:"country"`
	Locale       *string         `json:"locale"`
	Timezone     *string         `json:"timezone"`
	CrmID        *string         `json:"crmID"`
	CrmOwner     *string         `json:"crmOwner"`
	Groups       []*AccountGroup `json:"groups"`
	Seats        []*Seat         `json:"seats"`
}

func (BuyerAccount) IsAccount() {}

type PublisherAccount struct {
	ID              int                 `json:"id"`
	CreationTime    *time.Time          `json:"creationTime"`
	ModifyTime      *time.Time          `json:"modifyTime"`
	Name            *string             `json:"name"`
	Status          AccountStatus       `json:"status"`
	AccountType     *AccountType        `json:"accountType"`
	Country         *string             `json:"country"`
	Locale          *string             `json:"locale"`
	Timezone        *string             `json:"timezone"`
	CrmID           *string             `json:"crmID"`
	CrmOwner        *string             `json:"crmOwner"`
	Groups          []*AccountGroup     `json:"groups"`
	LegacyAccountID *int                `json:"legacyAccountID"`
	SupplySource    *string             `json:"supplySource"`
	Financial       *PublisherFinancial `json:"financial"`
}

func (PublisherAccount) IsAccount() {}

type PublisherFinancial struct {
	PayeeName           *string `json:"payeeName"`
	PayeePhone          *string `json:"payeePhone"`
	PayeeAddress        *string `json:"payeeAddress"`
	PayeePostalCode     *string `json:"payeePostalCode"`
	HstNumber           *int    `json:"hstNumber"`
	PaymentMethod       *string `json:"paymentMethod"`
	OpenRevenueShare    *int    `json:"openRevenueShare"`
	PrivateRevenueShare *int    `json:"privateRevenueShare"`
	Currency            *string `json:"currency"`
	PaymentTerms        *string `json:"paymentTerms"`
	AutoInvoice         *int    `json:"autoInvoice"`
}

type Seat struct {
	ID                    int `json:"id"`
	ExternalTradingDeskID int `json:"externalTradingDeskID"`
}

type AccountStatus string

const (
	AccountStatusActivated   AccountStatus = "ACTIVATED"
	AccountStatusDeactivated AccountStatus = "DEACTIVATED"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusActivated,
	AccountStatusDeactivated,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusActivated, AccountStatusDeactivated:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountType string

const (
	AccountTypePublisher AccountType = "PUBLISHER"
	AccountTypeBuyer     AccountType = "BUYER"
	AccountTypeDsp       AccountType = "DSP"
)

var AllAccountType = []AccountType{
	AccountTypePublisher,
	AccountTypeBuyer,
	AccountTypeDsp,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypePublisher, AccountTypeBuyer, AccountTypeDsp:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
